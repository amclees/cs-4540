# Copyright (c) 2018 Andrew McLees
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

function [rmat] = rotx(theta)
  rmat = [1 0 0;
          0 cos(theta) -sin(theta);
          0 sin(theta) cos(theta)];
endfunction

function [rmat] = roty(theta)
  rmat = [cos(theta) 0 sin(theta);
          0 1 0;
          -sin(theta) 0 cos(theta)];
endfunction

function [rmat] = rotz(theta)
  rmat = [cos(theta) -sin(theta) 0;
          sin(theta) cos(theta) 0;
          0 0 1];
endfunction

function [rmat] = rotxd(theta)
  rmat = rotx(deg2rad(theta));
endfunction

function [rmat] = rotyd(theta)
  rmat = roty(deg2rad(theta));
endfunction

function [rmat] = rotzd(theta)
  rmat = rotz(deg2rad(theta));
endfunction

# Axis rotations

function [rmat] = rotxaxis(theta)
  rmat = [1 0 0;
          0 cos(theta) sin(theta);
          0 -sin(theta) cos(theta)];
endfunction

function [rmat] = rotyaxis(theta)
  rmat = [cos(theta) 0 -sin(theta);
          0 1 0;
          sin(theta) 0 cos(theta)];
endfunction

function [rmat] = rotzaxis(theta)
  rmat = [cos(theta) sin(theta) 0;
          -sin(theta) cos(theta) 0;
          0 0 1];
endfunction


# Equivalent names
# alpha beta gamma
# z     y    x
# pitch yaw  roll
function [rmat] = rotzyx(alpha, beta, gamma)
  rmat = rotz(alpha) * roty(beta) * rotx(gamma);
endfunction

function [rmat] = rotzyxd(alpha, beta, gamma)
  rmat = rotzd(alpha) * rotyd(beta) * rotxd(gamma);
endfunction

function [magnitude] = mag(v)
  total = 0;
  for i = v
    total += i^2;
  endfor
  magnitude = sqrt(total);
endfunction

function [distance] = dist(v1, v2)
  dist = 0;
  for i = 1:length(v1)
    dist += (v1(i) - v2(i))^2;
  endfor
  distance = sqrt(dist);
endfunction

# dist2 is for distance between 2 2-element row or column vectors
function [distance] = dist2(v1, v2)
  distance = sqrt((v1(1) - v2(1))^2 + (v1(2) - v2(2))^2);
endfunction

# dist3 is for distance between 2 3-element row or column vectors
function [distance] = dist3(v1, v2)
  distance = sqrt((v1(1) - v2(1))^2 + (v1(2) - v2(2))^2 + (v1(3) - v2(3))^2);
endfunction

# r is the rotation matrix, abbreviated for readability
function [A] = ang(r)
  beta = atan2(-r(3, 1), sqrt(r(1, 1)^2 + r(2, 1)^2));
  alpha = atan2(r(2, 1) / cos(beta), r(1, 1) / cos(beta));
  gamma = atan2(r(3, 2) / cos(beta), r(3, 3) / cos(beta));
  A = [gamma ; beta ; alpha];
endfunction

function [A] = angd(r)
  A = rad2deg(ang(r));
endfunction

# Construct a euler matrix
# precession - phi
# nutation - theta
# spin - psi
function [rmat] = eulermat(precession, nutation, spin)
  rmat = rotz(-spin) * rotx(nutation) * rotz(-precession);
endfunction

# Construct a euler matrix from angles in degrees
function [rmat] = eulermatd(precession, nutation, spin)
  rmat = rotzd(-spin) * rotxd(nutation) * rotzd(-precession);
endfunction

# Extract euler angles from a rotation matrix
function [A] = eulerang(r)
  precession = -atan(r(3, 1) / r(3, 2));
  nutation = acos(r(3, 3));
  spin = atan(r(1, 3) / r(2, 3));
  A = [precession ; nutation ; spin];
endfunction

# Extract euler angles from a rotation matrix in degrees
function [A] = eulerangd(r)
  radian = eulerang(r);
  A = [rad2deg(radian(1)) ; rad2deg(radian(2)) ; rad2deg(radian(3))];
endfunction

